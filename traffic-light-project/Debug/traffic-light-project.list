
traffic-light-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800281c  0800281c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800281c  0800281c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800281c  0800281c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000078  0800289c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800289c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009395  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3e  00000000  00000000  00029436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ba9  00000000  00000000  0002c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba43  00000000  00000000  00042da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008237a  00000000  00000000  0004e7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0b5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  000d0bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002794 	.word	0x08002794

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002794 	.word	0x08002794

0800014c <subKeyProcess>:

static int KeyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

static int TimerForKeyPress[3] = {200, 200, 200};

void subKeyProcess(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    button_flag[index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000094 	.word	0x20000094

0800016c <isButtonPressed>:

int isButtonPressed(int index) {
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
    if (button_flag[index]) {
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d006      	beq.n	800018e <isButtonPressed+0x22>
        button_flag[index] = 0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
    }
    return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000094 	.word	0x20000094

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e08e      	b.n	80002ca <getKeyInput+0x12a>
        KeyReg0[i] = KeyReg1[i];
 80001ac:	4a4b      	ldr	r2, [pc, #300]	; (80002dc <getKeyInput+0x13c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	494a      	ldr	r1, [pc, #296]	; (80002e0 <getKeyInput+0x140>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 80001bc:	4a49      	ldr	r2, [pc, #292]	; (80002e4 <getKeyInput+0x144>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4945      	ldr	r1, [pc, #276]	; (80002dc <getKeyInput+0x13c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == 0) KeyReg2[i] = HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4844      	ldr	r0, [pc, #272]	; (80002e8 <getKeyInput+0x148>)
 80001d8:	f001 fa9c 	bl	8001714 <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	4619      	mov	r1, r3
 80001e0:	4a40      	ldr	r2, [pc, #256]	; (80002e4 <getKeyInput+0x144>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
 80001ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001f2:	483d      	ldr	r0, [pc, #244]	; (80002e8 <getKeyInput+0x148>)
 80001f4:	f001 fa8e 	bl	8001714 <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4619      	mov	r1, r3
 80001fc:	4a39      	ldr	r2, [pc, #228]	; (80002e4 <getKeyInput+0x144>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d10a      	bne.n	8000220 <getKeyInput+0x80>
 800020a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800020e:	4836      	ldr	r0, [pc, #216]	; (80002e8 <getKeyInput+0x148>)
 8000210:	f001 fa80 	bl	8001714 <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	4619      	mov	r1, r3
 8000218:	4a32      	ldr	r2, [pc, #200]	; (80002e4 <getKeyInput+0x144>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000220:	4a2f      	ldr	r2, [pc, #188]	; (80002e0 <getKeyInput+0x140>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	492c      	ldr	r1, [pc, #176]	; (80002dc <getKeyInput+0x13c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000230:	429a      	cmp	r2, r3
 8000232:	d147      	bne.n	80002c4 <getKeyInput+0x124>
 8000234:	4a29      	ldr	r2, [pc, #164]	; (80002dc <getKeyInput+0x13c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	4929      	ldr	r1, [pc, #164]	; (80002e4 <getKeyInput+0x144>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000244:	429a      	cmp	r2, r3
 8000246:	d13d      	bne.n	80002c4 <getKeyInput+0x124>
            if (KeyReg3[i] != KeyReg2[i]) {
 8000248:	4a28      	ldr	r2, [pc, #160]	; (80002ec <getKeyInput+0x14c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	4924      	ldr	r1, [pc, #144]	; (80002e4 <getKeyInput+0x144>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000258:	429a      	cmp	r2, r3
 800025a:	d016      	beq.n	800028a <getKeyInput+0xea>
                KeyReg3[i] = KeyReg2[i];
 800025c:	4a21      	ldr	r2, [pc, #132]	; (80002e4 <getKeyInput+0x144>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	4921      	ldr	r1, [pc, #132]	; (80002ec <getKeyInput+0x14c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {
 800026c:	4a1d      	ldr	r2, [pc, #116]	; (80002e4 <getKeyInput+0x144>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d125      	bne.n	80002c4 <getKeyInput+0x124>
                    subKeyProcess(i);
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	f7ff ff67 	bl	800014c <subKeyProcess>
                    TimerForKeyPress[i] = 200;
 800027e:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <getKeyInput+0x150>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	21c8      	movs	r1, #200	; 0xc8
 8000284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000288:	e01c      	b.n	80002c4 <getKeyInput+0x124>
                }
            } else {
                TimerForKeyPress[i]--;
 800028a:	4a19      	ldr	r2, [pc, #100]	; (80002f0 <getKeyInput+0x150>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	1e5a      	subs	r2, r3, #1
 8000294:	4916      	ldr	r1, [pc, #88]	; (80002f0 <getKeyInput+0x150>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimerForKeyPress[i] == 0) {
 800029c:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <getKeyInput+0x150>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d10d      	bne.n	80002c4 <getKeyInput+0x124>
                    if (KeyReg2[i] == PRESSED_STATE) {
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <getKeyInput+0x144>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d102      	bne.n	80002ba <getKeyInput+0x11a>
                        subKeyProcess(i);
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f7ff ff49 	bl	800014c <subKeyProcess>
                    }

                    TimerForKeyPress[i] = 200;
 80002ba:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <getKeyInput+0x150>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	21c8      	movs	r1, #200	; 0xc8
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	f77f af6d 	ble.w	80001ac <getKeyInput+0xc>
                }
            }
        }
    }

}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000010 	.word	0x20000010
 80002e0:	20000004 	.word	0x20000004
 80002e4:	2000001c 	.word	0x2000001c
 80002e8:	40011000 	.word	0x40011000
 80002ec:	20000028 	.word	0x20000028
 80002f0:	20000034 	.word	0x20000034

080002f4 <Red_Green>:
 *      Author: ProX
 */

#include "fsm.h"

void Red_Green() {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2102      	movs	r1, #2
 80002fc:	480e      	ldr	r0, [pc, #56]	; (8000338 <Red_Green+0x44>)
 80002fe:	f001 fa20 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2104      	movs	r1, #4
 8000306:	480c      	ldr	r0, [pc, #48]	; (8000338 <Red_Green+0x44>)
 8000308:	f001 fa1b 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2108      	movs	r1, #8
 8000310:	4809      	ldr	r0, [pc, #36]	; (8000338 <Red_Green+0x44>)
 8000312:	f001 fa16 	bl	8001742 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <Red_Green+0x44>)
 800031c:	f001 fa11 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <Red_Green+0x44>)
 8000326:	f001 fa0c 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2140      	movs	r1, #64	; 0x40
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <Red_Green+0x44>)
 8000330:	f001 fa07 	bl	8001742 <HAL_GPIO_WritePin>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40010800 	.word	0x40010800

0800033c <Red_Yellow>:

void Red_Yellow() {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2102      	movs	r1, #2
 8000344:	480e      	ldr	r0, [pc, #56]	; (8000380 <Red_Yellow+0x44>)
 8000346:	f001 f9fc 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2104      	movs	r1, #4
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <Red_Yellow+0x44>)
 8000350:	f001 f9f7 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2108      	movs	r1, #8
 8000358:	4809      	ldr	r0, [pc, #36]	; (8000380 <Red_Yellow+0x44>)
 800035a:	f001 f9f2 	bl	8001742 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2110      	movs	r1, #16
 8000362:	4807      	ldr	r0, [pc, #28]	; (8000380 <Red_Yellow+0x44>)
 8000364:	f001 f9ed 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2120      	movs	r1, #32
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <Red_Yellow+0x44>)
 800036e:	f001 f9e8 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2140      	movs	r1, #64	; 0x40
 8000376:	4802      	ldr	r0, [pc, #8]	; (8000380 <Red_Yellow+0x44>)
 8000378:	f001 f9e3 	bl	8001742 <HAL_GPIO_WritePin>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40010800 	.word	0x40010800

08000384 <Green_Red>:

void Green_Red() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2102      	movs	r1, #2
 800038c:	480e      	ldr	r0, [pc, #56]	; (80003c8 <Green_Red+0x44>)
 800038e:	f001 f9d8 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2104      	movs	r1, #4
 8000396:	480c      	ldr	r0, [pc, #48]	; (80003c8 <Green_Red+0x44>)
 8000398:	f001 f9d3 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2108      	movs	r1, #8
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <Green_Red+0x44>)
 80003a2:	f001 f9ce 	bl	8001742 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2110      	movs	r1, #16
 80003aa:	4807      	ldr	r0, [pc, #28]	; (80003c8 <Green_Red+0x44>)
 80003ac:	f001 f9c9 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2120      	movs	r1, #32
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <Green_Red+0x44>)
 80003b6:	f001 f9c4 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2140      	movs	r1, #64	; 0x40
 80003be:	4802      	ldr	r0, [pc, #8]	; (80003c8 <Green_Red+0x44>)
 80003c0:	f001 f9bf 	bl	8001742 <HAL_GPIO_WritePin>
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40010800 	.word	0x40010800

080003cc <Yellow_Red>:

void Yellow_Red() {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2102      	movs	r1, #2
 80003d4:	480e      	ldr	r0, [pc, #56]	; (8000410 <Yellow_Red+0x44>)
 80003d6:	f001 f9b4 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2104      	movs	r1, #4
 80003de:	480c      	ldr	r0, [pc, #48]	; (8000410 <Yellow_Red+0x44>)
 80003e0:	f001 f9af 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2108      	movs	r1, #8
 80003e8:	4809      	ldr	r0, [pc, #36]	; (8000410 <Yellow_Red+0x44>)
 80003ea:	f001 f9aa 	bl	8001742 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2110      	movs	r1, #16
 80003f2:	4807      	ldr	r0, [pc, #28]	; (8000410 <Yellow_Red+0x44>)
 80003f4:	f001 f9a5 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2120      	movs	r1, #32
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <Yellow_Red+0x44>)
 80003fe:	f001 f9a0 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2140      	movs	r1, #64	; 0x40
 8000406:	4802      	ldr	r0, [pc, #8]	; (8000410 <Yellow_Red+0x44>)
 8000408:	f001 f99b 	bl	8001742 <HAL_GPIO_WritePin>
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40010800 	.word	0x40010800

08000414 <trafficOff>:

void trafficOff() {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2102      	movs	r1, #2
 800041c:	480e      	ldr	r0, [pc, #56]	; (8000458 <trafficOff+0x44>)
 800041e:	f001 f990 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2104      	movs	r1, #4
 8000426:	480c      	ldr	r0, [pc, #48]	; (8000458 <trafficOff+0x44>)
 8000428:	f001 f98b 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2108      	movs	r1, #8
 8000430:	4809      	ldr	r0, [pc, #36]	; (8000458 <trafficOff+0x44>)
 8000432:	f001 f986 	bl	8001742 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2110      	movs	r1, #16
 800043a:	4807      	ldr	r0, [pc, #28]	; (8000458 <trafficOff+0x44>)
 800043c:	f001 f981 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2120      	movs	r1, #32
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <trafficOff+0x44>)
 8000446:	f001 f97c 	bl	8001742 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2140      	movs	r1, #64	; 0x40
 800044e:	4802      	ldr	r0, [pc, #8]	; (8000458 <trafficOff+0x44>)
 8000450:	f001 f977 	bl	8001742 <HAL_GPIO_WritePin>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40010800 	.word	0x40010800

0800045c <handleKeyInput>:

void handleKeyInput(int index) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    if (index == 0) {
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d14b      	bne.n	8000502 <handleKeyInput+0xa6>
        KeyReg1Counter++;
 800046a:	4b9b      	ldr	r3, [pc, #620]	; (80006d8 <handleKeyInput+0x27c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3301      	adds	r3, #1
 8000470:	4a99      	ldr	r2, [pc, #612]	; (80006d8 <handleKeyInput+0x27c>)
 8000472:	6013      	str	r3, [r2, #0]

        if (KeyReg1Counter == 1 || KeyReg1Counter > 4) {
 8000474:	4b98      	ldr	r3, [pc, #608]	; (80006d8 <handleKeyInput+0x27c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d003      	beq.n	8000484 <handleKeyInput+0x28>
 800047c:	4b96      	ldr	r3, [pc, #600]	; (80006d8 <handleKeyInput+0x27c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b04      	cmp	r3, #4
 8000482:	dd2a      	ble.n	80004da <handleKeyInput+0x7e>
            KeyReg1Counter = 1;
 8000484:	4b94      	ldr	r3, [pc, #592]	; (80006d8 <handleKeyInput+0x27c>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]

            status = INIT;
 800048a:	4b94      	ldr	r3, [pc, #592]	; (80006dc <handleKeyInput+0x280>)
 800048c:	2203      	movs	r2, #3
 800048e:	601a      	str	r2, [r3, #0]

            led_1 = setTraffic[RED] / 1000;
 8000490:	4b93      	ldr	r3, [pc, #588]	; (80006e0 <handleKeyInput+0x284>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a93      	ldr	r2, [pc, #588]	; (80006e4 <handleKeyInput+0x288>)
 8000496:	fb82 1203 	smull	r1, r2, r2, r3
 800049a:	1192      	asrs	r2, r2, #6
 800049c:	17db      	asrs	r3, r3, #31
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	4a91      	ldr	r2, [pc, #580]	; (80006e8 <handleKeyInput+0x28c>)
 80004a2:	6013      	str	r3, [r2, #0]
            led_2 = setTraffic[GREEN] / 1000;
 80004a4:	4b8e      	ldr	r3, [pc, #568]	; (80006e0 <handleKeyInput+0x284>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	4a8e      	ldr	r2, [pc, #568]	; (80006e4 <handleKeyInput+0x288>)
 80004aa:	fb82 1203 	smull	r1, r2, r2, r3
 80004ae:	1192      	asrs	r2, r2, #6
 80004b0:	17db      	asrs	r3, r3, #31
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	4a8d      	ldr	r2, [pc, #564]	; (80006ec <handleKeyInput+0x290>)
 80004b6:	6013      	str	r3, [r2, #0]
            stat_led_1 = RED;
 80004b8:	4b8d      	ldr	r3, [pc, #564]	; (80006f0 <handleKeyInput+0x294>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
            stat_led_2 = GREEN;
 80004be:	4b8d      	ldr	r3, [pc, #564]	; (80006f4 <handleKeyInput+0x298>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	601a      	str	r2, [r3, #0]
            road_1_flag = 0;
 80004c4:	4b8c      	ldr	r3, [pc, #560]	; (80006f8 <handleKeyInput+0x29c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
            road_2_flag = 0;
 80004ca:	4b8c      	ldr	r3, [pc, #560]	; (80006fc <handleKeyInput+0x2a0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
            setTimer_LED(1000);
 80004d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d4:	f000 fcfc 	bl	8000ed0 <setTimer_LED>
        stat_led_2 = GREEN;
        road_1_flag = 0;
        road_2_flag = 0;
        setTimer_LED(1000);
    }
}
 80004d8:	e0fa      	b.n	80006d0 <handleKeyInput+0x274>
        } else if (KeyReg1Counter == 2 || KeyReg1Counter == 3|| KeyReg1Counter == 4) {
 80004da:	4b7f      	ldr	r3, [pc, #508]	; (80006d8 <handleKeyInput+0x27c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d008      	beq.n	80004f4 <handleKeyInput+0x98>
 80004e2:	4b7d      	ldr	r3, [pc, #500]	; (80006d8 <handleKeyInput+0x27c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d004      	beq.n	80004f4 <handleKeyInput+0x98>
 80004ea:	4b7b      	ldr	r3, [pc, #492]	; (80006d8 <handleKeyInput+0x27c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	f040 80ee 	bne.w	80006d0 <handleKeyInput+0x274>
            setTimer3(500);
 80004f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f8:	f000 fcd0 	bl	8000e9c <setTimer3>
            trafficOff();
 80004fc:	f7ff ff8a 	bl	8000414 <trafficOff>
}
 8000500:	e0e6      	b.n	80006d0 <handleKeyInput+0x274>
    else if (index == 1) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d13f      	bne.n	8000588 <handleKeyInput+0x12c>
        if (KeyReg1Counter == 2) {
 8000508:	4b73      	ldr	r3, [pc, #460]	; (80006d8 <handleKeyInput+0x27c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d110      	bne.n	8000532 <handleKeyInput+0xd6>
            TimerModify[RED] += 1000;
 8000510:	4b7b      	ldr	r3, [pc, #492]	; (8000700 <handleKeyInput+0x2a4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000518:	4a79      	ldr	r2, [pc, #484]	; (8000700 <handleKeyInput+0x2a4>)
 800051a:	6013      	str	r3, [r2, #0]
            if (TimerModify[RED] > 9000) {
 800051c:	4b78      	ldr	r3, [pc, #480]	; (8000700 <handleKeyInput+0x2a4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f242 3228 	movw	r2, #9000	; 0x2328
 8000524:	4293      	cmp	r3, r2
 8000526:	f340 80d3 	ble.w	80006d0 <handleKeyInput+0x274>
                TimerModify[RED] = 0;
 800052a:	4b75      	ldr	r3, [pc, #468]	; (8000700 <handleKeyInput+0x2a4>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	e0ce      	b.n	80006d0 <handleKeyInput+0x274>
        else if (KeyReg1Counter == 3) {
 8000532:	4b69      	ldr	r3, [pc, #420]	; (80006d8 <handleKeyInput+0x27c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b03      	cmp	r3, #3
 8000538:	d110      	bne.n	800055c <handleKeyInput+0x100>
            TimerModify[YELLOW] += 1000;
 800053a:	4b71      	ldr	r3, [pc, #452]	; (8000700 <handleKeyInput+0x2a4>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000542:	4a6f      	ldr	r2, [pc, #444]	; (8000700 <handleKeyInput+0x2a4>)
 8000544:	6053      	str	r3, [r2, #4]
            if (TimerModify[YELLOW] > 9000) {
 8000546:	4b6e      	ldr	r3, [pc, #440]	; (8000700 <handleKeyInput+0x2a4>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	f242 3228 	movw	r2, #9000	; 0x2328
 800054e:	4293      	cmp	r3, r2
 8000550:	f340 80be 	ble.w	80006d0 <handleKeyInput+0x274>
                TimerModify[YELLOW] = 0;
 8000554:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <handleKeyInput+0x2a4>)
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
}
 800055a:	e0b9      	b.n	80006d0 <handleKeyInput+0x274>
        else if (KeyReg1Counter == 4) {
 800055c:	4b5e      	ldr	r3, [pc, #376]	; (80006d8 <handleKeyInput+0x27c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b04      	cmp	r3, #4
 8000562:	f040 80b5 	bne.w	80006d0 <handleKeyInput+0x274>
            TimerModify[GREEN] += 1000;
 8000566:	4b66      	ldr	r3, [pc, #408]	; (8000700 <handleKeyInput+0x2a4>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800056e:	4a64      	ldr	r2, [pc, #400]	; (8000700 <handleKeyInput+0x2a4>)
 8000570:	6093      	str	r3, [r2, #8]
            if (TimerModify[GREEN] > 9000) {
 8000572:	4b63      	ldr	r3, [pc, #396]	; (8000700 <handleKeyInput+0x2a4>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	f242 3228 	movw	r2, #9000	; 0x2328
 800057a:	4293      	cmp	r3, r2
 800057c:	f340 80a8 	ble.w	80006d0 <handleKeyInput+0x274>
                TimerModify[GREEN] = 0;
 8000580:	4b5f      	ldr	r3, [pc, #380]	; (8000700 <handleKeyInput+0x2a4>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
}
 8000586:	e0a3      	b.n	80006d0 <handleKeyInput+0x274>
    else if (index == 2) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b02      	cmp	r3, #2
 800058c:	f040 80a0 	bne.w	80006d0 <handleKeyInput+0x274>
        if (KeyReg1Counter == 2) {
 8000590:	4b51      	ldr	r3, [pc, #324]	; (80006d8 <handleKeyInput+0x27c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b02      	cmp	r3, #2
 8000596:	d11c      	bne.n	80005d2 <handleKeyInput+0x176>
            KeyReg1Counter = 1;
 8000598:	4b4f      	ldr	r3, [pc, #316]	; (80006d8 <handleKeyInput+0x27c>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
            if (TimerModify[RED] - TimerModify[YELLOW] - 1000 > 0) {
 800059e:	4b58      	ldr	r3, [pc, #352]	; (8000700 <handleKeyInput+0x2a4>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b57      	ldr	r3, [pc, #348]	; (8000700 <handleKeyInput+0x2a4>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ac:	dd52      	ble.n	8000654 <handleKeyInput+0x1f8>
                setTraffic[RED] = TimerModify[RED];
 80005ae:	4b54      	ldr	r3, [pc, #336]	; (8000700 <handleKeyInput+0x2a4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a4b      	ldr	r2, [pc, #300]	; (80006e0 <handleKeyInput+0x284>)
 80005b4:	6013      	str	r3, [r2, #0]
                setTraffic[GREEN] = setTraffic[RED] - setTraffic[YELLOW] - 1000;
 80005b6:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <handleKeyInput+0x284>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b49      	ldr	r3, [pc, #292]	; (80006e0 <handleKeyInput+0x284>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80005c4:	4a46      	ldr	r2, [pc, #280]	; (80006e0 <handleKeyInput+0x284>)
 80005c6:	6093      	str	r3, [r2, #8]
                TimerModify[GREEN] = setTraffic[GREEN];
 80005c8:	4b45      	ldr	r3, [pc, #276]	; (80006e0 <handleKeyInput+0x284>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	4a4c      	ldr	r2, [pc, #304]	; (8000700 <handleKeyInput+0x2a4>)
 80005ce:	6093      	str	r3, [r2, #8]
 80005d0:	e040      	b.n	8000654 <handleKeyInput+0x1f8>
        else if (KeyReg1Counter == 3) {
 80005d2:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <handleKeyInput+0x27c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d11c      	bne.n	8000614 <handleKeyInput+0x1b8>
            KeyReg1Counter = 1;
 80005da:	4b3f      	ldr	r3, [pc, #252]	; (80006d8 <handleKeyInput+0x27c>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
            if (TimerModify[YELLOW] + TimerModify[GREEN] + 1000 <= 9000) {
 80005e0:	4b47      	ldr	r3, [pc, #284]	; (8000700 <handleKeyInput+0x2a4>)
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	4b46      	ldr	r3, [pc, #280]	; (8000700 <handleKeyInput+0x2a4>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	4413      	add	r3, r2
 80005ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80005ee:	dc31      	bgt.n	8000654 <handleKeyInput+0x1f8>
                setTraffic[YELLOW] = TimerModify[YELLOW];
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <handleKeyInput+0x2a4>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4a3a      	ldr	r2, [pc, #232]	; (80006e0 <handleKeyInput+0x284>)
 80005f6:	6053      	str	r3, [r2, #4]
                setTraffic[RED] = setTraffic[YELLOW] + setTraffic[GREEN] + 1000;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <handleKeyInput+0x284>)
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <handleKeyInput+0x284>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4413      	add	r3, r2
 8000602:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000606:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <handleKeyInput+0x284>)
 8000608:	6013      	str	r3, [r2, #0]
                TimerModify[RED] = setTraffic[RED];
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <handleKeyInput+0x284>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a3c      	ldr	r2, [pc, #240]	; (8000700 <handleKeyInput+0x2a4>)
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	e01f      	b.n	8000654 <handleKeyInput+0x1f8>
            else if (KeyReg1Counter == 4) {
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <handleKeyInput+0x27c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d11b      	bne.n	8000654 <handleKeyInput+0x1f8>
                KeyReg1Counter = 1;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <handleKeyInput+0x27c>)
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
                if (TimerModify[YELLOW] + TimerModify[GREEN] + 1000 <= 9000) {
 8000622:	4b37      	ldr	r3, [pc, #220]	; (8000700 <handleKeyInput+0x2a4>)
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	4b36      	ldr	r3, [pc, #216]	; (8000700 <handleKeyInput+0x2a4>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	4413      	add	r3, r2
 800062c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000630:	dc10      	bgt.n	8000654 <handleKeyInput+0x1f8>
                    setTraffic[GREEN] = TimerModify[GREEN];
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <handleKeyInput+0x2a4>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <handleKeyInput+0x284>)
 8000638:	6093      	str	r3, [r2, #8]
                    setTraffic[RED] = setTraffic[YELLOW] + setTraffic[GREEN] + 1000;
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <handleKeyInput+0x284>)
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <handleKeyInput+0x284>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4413      	add	r3, r2
 8000644:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <handleKeyInput+0x284>)
 800064a:	6013      	str	r3, [r2, #0]
                    TimerModify[RED] = setTraffic[RED];
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <handleKeyInput+0x284>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <handleKeyInput+0x2a4>)
 8000652:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	482a      	ldr	r0, [pc, #168]	; (8000704 <handleKeyInput+0x2a8>)
 800065a:	f001 f872 	bl	8001742 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DOT1_GPIO_Port, DOT1_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4827      	ldr	r0, [pc, #156]	; (8000704 <handleKeyInput+0x2a8>)
 8000666:	f001 f86c 	bl	8001742 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DOT2_GPIO_Port, DOT2_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	4824      	ldr	r0, [pc, #144]	; (8000704 <handleKeyInput+0x2a8>)
 8000672:	f001 f866 	bl	8001742 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DOT3_GPIO_Port, DOT3_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067c:	4821      	ldr	r0, [pc, #132]	; (8000704 <handleKeyInput+0x2a8>)
 800067e:	f001 f860 	bl	8001742 <HAL_GPIO_WritePin>
        status = INIT;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <handleKeyInput+0x280>)
 8000684:	2203      	movs	r2, #3
 8000686:	601a      	str	r2, [r3, #0]
        led_1 = setTraffic[RED] / 1000;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <handleKeyInput+0x284>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <handleKeyInput+0x288>)
 800068e:	fb82 1203 	smull	r1, r2, r2, r3
 8000692:	1192      	asrs	r2, r2, #6
 8000694:	17db      	asrs	r3, r3, #31
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <handleKeyInput+0x28c>)
 800069a:	6013      	str	r3, [r2, #0]
        led_2 = setTraffic[GREEN] / 1000;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <handleKeyInput+0x284>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <handleKeyInput+0x288>)
 80006a2:	fb82 1203 	smull	r1, r2, r2, r3
 80006a6:	1192      	asrs	r2, r2, #6
 80006a8:	17db      	asrs	r3, r3, #31
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <handleKeyInput+0x290>)
 80006ae:	6013      	str	r3, [r2, #0]
        stat_led_1 = RED;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <handleKeyInput+0x294>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
        stat_led_2 = GREEN;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <handleKeyInput+0x298>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
        road_1_flag = 0;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <handleKeyInput+0x29c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
        road_2_flag = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <handleKeyInput+0x2a0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
        setTimer_LED(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f000 fc00 	bl	8000ed0 <setTimer_LED>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000058 	.word	0x20000058
 80006e0:	2000004c 	.word	0x2000004c
 80006e4:	10624dd3 	.word	0x10624dd3
 80006e8:	2000005c 	.word	0x2000005c
 80006ec:	20000060 	.word	0x20000060
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	20000064 	.word	0x20000064
 80006f8:	200000a4 	.word	0x200000a4
 80006fc:	200000a8 	.word	0x200000a8
 8000700:	20000040 	.word	0x20000040
 8000704:	40010800 	.word	0x40010800

08000708 <fsm_run>:

void fsm_run() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    switch (status) {
 800070c:	4ba7      	ldr	r3, [pc, #668]	; (80009ac <fsm_run+0x2a4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000714:	f000 8086 	beq.w	8000824 <fsm_run+0x11c>
 8000718:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800071c:	f300 8143 	bgt.w	80009a6 <fsm_run+0x29e>
 8000720:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000724:	d063      	beq.n	80007ee <fsm_run+0xe6>
 8000726:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800072a:	f300 813c 	bgt.w	80009a6 <fsm_run+0x29e>
 800072e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000732:	f000 80fb 	beq.w	800092c <fsm_run+0x224>
 8000736:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800073a:	f300 8134 	bgt.w	80009a6 <fsm_run+0x29e>
 800073e:	2bfa      	cmp	r3, #250	; 0xfa
 8000740:	d032      	beq.n	80007a8 <fsm_run+0xa0>
 8000742:	2bfa      	cmp	r3, #250	; 0xfa
 8000744:	f300 812f 	bgt.w	80009a6 <fsm_run+0x29e>
 8000748:	2bc8      	cmp	r3, #200	; 0xc8
 800074a:	f000 80bc 	beq.w	80008c6 <fsm_run+0x1be>
 800074e:	2bc8      	cmp	r3, #200	; 0xc8
 8000750:	f300 8129 	bgt.w	80009a6 <fsm_run+0x29e>
 8000754:	2b96      	cmp	r3, #150	; 0x96
 8000756:	d00d      	beq.n	8000774 <fsm_run+0x6c>
 8000758:	2b96      	cmp	r3, #150	; 0x96
 800075a:	f300 8124 	bgt.w	80009a6 <fsm_run+0x29e>
 800075e:	2b03      	cmp	r3, #3
 8000760:	d002      	beq.n	8000768 <fsm_run+0x60>
 8000762:	2b64      	cmp	r3, #100	; 0x64
 8000764:	d07d      	beq.n	8000862 <fsm_run+0x15a>
            if (isButtonPressed(2)) {
                handleKeyInput(2);
                status = RED_GREEN;
            }
    }
}
 8000766:	e11e      	b.n	80009a6 <fsm_run+0x29e>
            Red_Green();
 8000768:	f7ff fdc4 	bl	80002f4 <Red_Green>
            status = RED_GREEN;
 800076c:	4b8f      	ldr	r3, [pc, #572]	; (80009ac <fsm_run+0x2a4>)
 800076e:	2296      	movs	r2, #150	; 0x96
 8000770:	601a      	str	r2, [r3, #0]
            break;
 8000772:	e118      	b.n	80009a6 <fsm_run+0x29e>
            Red_Green();
 8000774:	f7ff fdbe 	bl	80002f4 <Red_Green>
            if (isButtonPressed(0)) {
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff fcf7 	bl	800016c <isButtonPressed>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <fsm_run+0x88>
                handleKeyInput(0);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fe69 	bl	800045c <handleKeyInput>
                status = MAN_RED;
 800078a:	4b88      	ldr	r3, [pc, #544]	; (80009ac <fsm_run+0x2a4>)
 800078c:	2264      	movs	r2, #100	; 0x64
 800078e:	601a      	str	r2, [r3, #0]
            if (road_2_flag == 1) {
 8000790:	4b87      	ldr	r3, [pc, #540]	; (80009b0 <fsm_run+0x2a8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	f040 80fb 	bne.w	8000990 <fsm_run+0x288>
                road_2_flag = 0;
 800079a:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <fsm_run+0x2a8>)
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
                status = RED_YELLOW;
 80007a0:	4b82      	ldr	r3, [pc, #520]	; (80009ac <fsm_run+0x2a4>)
 80007a2:	22fa      	movs	r2, #250	; 0xfa
 80007a4:	601a      	str	r2, [r3, #0]
            break;
 80007a6:	e0f3      	b.n	8000990 <fsm_run+0x288>
            Red_Yellow();
 80007a8:	f7ff fdc8 	bl	800033c <Red_Yellow>
            if (isButtonPressed(0)) {
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fcdd 	bl	800016c <isButtonPressed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <fsm_run+0xbc>
                handleKeyInput(0);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff fe4f 	bl	800045c <handleKeyInput>
                status = MAN_RED;
 80007be:	4b7b      	ldr	r3, [pc, #492]	; (80009ac <fsm_run+0x2a4>)
 80007c0:	2264      	movs	r2, #100	; 0x64
 80007c2:	601a      	str	r2, [r3, #0]
            if (road_1_flag == 1 && road_2_flag == 1) {
 80007c4:	4b7b      	ldr	r3, [pc, #492]	; (80009b4 <fsm_run+0x2ac>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	f040 80e3 	bne.w	8000994 <fsm_run+0x28c>
 80007ce:	4b78      	ldr	r3, [pc, #480]	; (80009b0 <fsm_run+0x2a8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	f040 80de 	bne.w	8000994 <fsm_run+0x28c>
                road_1_flag = 0;
 80007d8:	4b76      	ldr	r3, [pc, #472]	; (80009b4 <fsm_run+0x2ac>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
                road_2_flag = 0;
 80007de:	4b74      	ldr	r3, [pc, #464]	; (80009b0 <fsm_run+0x2a8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
                status = GREEN_RED;
 80007e4:	4b71      	ldr	r3, [pc, #452]	; (80009ac <fsm_run+0x2a4>)
 80007e6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80007ea:	601a      	str	r2, [r3, #0]
            break;
 80007ec:	e0d2      	b.n	8000994 <fsm_run+0x28c>
            Green_Red();
 80007ee:	f7ff fdc9 	bl	8000384 <Green_Red>
            if (isButtonPressed(0)) {
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fcba 	bl	800016c <isButtonPressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d005      	beq.n	800080a <fsm_run+0x102>
                handleKeyInput(0);
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fe2c 	bl	800045c <handleKeyInput>
                status = MAN_RED;
 8000804:	4b69      	ldr	r3, [pc, #420]	; (80009ac <fsm_run+0x2a4>)
 8000806:	2264      	movs	r2, #100	; 0x64
 8000808:	601a      	str	r2, [r3, #0]
            if (road_1_flag == 1) {
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <fsm_run+0x2ac>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	f040 80c2 	bne.w	8000998 <fsm_run+0x290>
                road_1_flag = 0;
 8000814:	4b67      	ldr	r3, [pc, #412]	; (80009b4 <fsm_run+0x2ac>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
                status = YELLOW_RED;
 800081a:	4b64      	ldr	r3, [pc, #400]	; (80009ac <fsm_run+0x2a4>)
 800081c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000820:	601a      	str	r2, [r3, #0]
            break;
 8000822:	e0b9      	b.n	8000998 <fsm_run+0x290>
            Yellow_Red();
 8000824:	f7ff fdd2 	bl	80003cc <Yellow_Red>
            if (isButtonPressed(0)) {
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fc9f 	bl	800016c <isButtonPressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <fsm_run+0x132>
                status = MAN_RED;
 8000834:	4b5d      	ldr	r3, [pc, #372]	; (80009ac <fsm_run+0x2a4>)
 8000836:	2264      	movs	r2, #100	; 0x64
 8000838:	601a      	str	r2, [r3, #0]
            if (road_1_flag == 1 && road_2_flag == 1) {
 800083a:	4b5e      	ldr	r3, [pc, #376]	; (80009b4 <fsm_run+0x2ac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	f040 80ac 	bne.w	800099c <fsm_run+0x294>
 8000844:	4b5a      	ldr	r3, [pc, #360]	; (80009b0 <fsm_run+0x2a8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	f040 80a7 	bne.w	800099c <fsm_run+0x294>
                road_1_flag = 0;
 800084e:	4b59      	ldr	r3, [pc, #356]	; (80009b4 <fsm_run+0x2ac>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
                road_2_flag = 0;
 8000854:	4b56      	ldr	r3, [pc, #344]	; (80009b0 <fsm_run+0x2a8>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
                status = RED_GREEN;
 800085a:	4b54      	ldr	r3, [pc, #336]	; (80009ac <fsm_run+0x2a4>)
 800085c:	2296      	movs	r2, #150	; 0x96
 800085e:	601a      	str	r2, [r3, #0]
            break;
 8000860:	e09c      	b.n	800099c <fsm_run+0x294>
            if (timer3_flag == 1) {
 8000862:	4b55      	ldr	r3, [pc, #340]	; (80009b8 <fsm_run+0x2b0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d10b      	bne.n	8000882 <fsm_run+0x17a>
                HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 800086a:	2102      	movs	r1, #2
 800086c:	4853      	ldr	r0, [pc, #332]	; (80009bc <fsm_run+0x2b4>)
 800086e:	f000 ff80 	bl	8001772 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8000872:	2110      	movs	r1, #16
 8000874:	4851      	ldr	r0, [pc, #324]	; (80009bc <fsm_run+0x2b4>)
 8000876:	f000 ff7c 	bl	8001772 <HAL_GPIO_TogglePin>
                setTimer3(500);
 800087a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800087e:	f000 fb0d 	bl	8000e9c <setTimer3>
            if (isButtonPressed(0)) {
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fc72 	bl	800016c <isButtonPressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d005      	beq.n	800089a <fsm_run+0x192>
                handleKeyInput(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fde4 	bl	800045c <handleKeyInput>
                status = MAN_YELLOW;
 8000894:	4b45      	ldr	r3, [pc, #276]	; (80009ac <fsm_run+0x2a4>)
 8000896:	22c8      	movs	r2, #200	; 0xc8
 8000898:	601a      	str	r2, [r3, #0]
            if (isButtonPressed(1)) {
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fc66 	bl	800016c <isButtonPressed>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <fsm_run+0x1a4>
                handleKeyInput(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fdd8 	bl	800045c <handleKeyInput>
            if (isButtonPressed(2)) {
 80008ac:	2002      	movs	r0, #2
 80008ae:	f7ff fc5d 	bl	800016c <isButtonPressed>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d073      	beq.n	80009a0 <fsm_run+0x298>
                handleKeyInput(2);
 80008b8:	2002      	movs	r0, #2
 80008ba:	f7ff fdcf 	bl	800045c <handleKeyInput>
                status = RED_GREEN;
 80008be:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <fsm_run+0x2a4>)
 80008c0:	2296      	movs	r2, #150	; 0x96
 80008c2:	601a      	str	r2, [r3, #0]
            break;
 80008c4:	e06c      	b.n	80009a0 <fsm_run+0x298>
            if (timer3_flag == 1) {
 80008c6:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <fsm_run+0x2b0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10b      	bne.n	80008e6 <fsm_run+0x1de>
                HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 80008ce:	2104      	movs	r1, #4
 80008d0:	483a      	ldr	r0, [pc, #232]	; (80009bc <fsm_run+0x2b4>)
 80008d2:	f000 ff4e 	bl	8001772 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 80008d6:	2120      	movs	r1, #32
 80008d8:	4838      	ldr	r0, [pc, #224]	; (80009bc <fsm_run+0x2b4>)
 80008da:	f000 ff4a 	bl	8001772 <HAL_GPIO_TogglePin>
                setTimer3(500);
 80008de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e2:	f000 fadb 	bl	8000e9c <setTimer3>
            if (isButtonPressed(0)) {
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fc40 	bl	800016c <isButtonPressed>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <fsm_run+0x1f8>
                handleKeyInput(0);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff fdb2 	bl	800045c <handleKeyInput>
                status = MAN_GREEN;
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <fsm_run+0x2a4>)
 80008fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008fe:	601a      	str	r2, [r3, #0]
            if (isButtonPressed(1)) {
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fc33 	bl	800016c <isButtonPressed>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <fsm_run+0x20a>
                handleKeyInput(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fda5 	bl	800045c <handleKeyInput>
            if (isButtonPressed(2)) {
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fc2a 	bl	800016c <isButtonPressed>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d042      	beq.n	80009a4 <fsm_run+0x29c>
                handleKeyInput(2);
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fd9c 	bl	800045c <handleKeyInput>
                status = RED_GREEN;
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <fsm_run+0x2a4>)
 8000926:	2296      	movs	r2, #150	; 0x96
 8000928:	601a      	str	r2, [r3, #0]
            break;
 800092a:	e03b      	b.n	80009a4 <fsm_run+0x29c>
            if (timer3_flag == 1) {
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <fsm_run+0x2b0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d10b      	bne.n	800094c <fsm_run+0x244>
                HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000934:	2108      	movs	r1, #8
 8000936:	4821      	ldr	r0, [pc, #132]	; (80009bc <fsm_run+0x2b4>)
 8000938:	f000 ff1b 	bl	8001772 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	481f      	ldr	r0, [pc, #124]	; (80009bc <fsm_run+0x2b4>)
 8000940:	f000 ff17 	bl	8001772 <HAL_GPIO_TogglePin>
                setTimer3(500);
 8000944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000948:	f000 faa8 	bl	8000e9c <setTimer3>
            if (isButtonPressed(0)) {
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fc0d 	bl	800016c <isButtonPressed>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d005      	beq.n	8000964 <fsm_run+0x25c>
                handleKeyInput(0);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fd7f 	bl	800045c <handleKeyInput>
                status = RED_GREEN;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <fsm_run+0x2a4>)
 8000960:	2296      	movs	r2, #150	; 0x96
 8000962:	601a      	str	r2, [r3, #0]
            if (isButtonPressed(1)) {
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fc01 	bl	800016c <isButtonPressed>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <fsm_run+0x26e>
                handleKeyInput(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fd73 	bl	800045c <handleKeyInput>
            if (isButtonPressed(2)) {
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fbf8 	bl	800016c <isButtonPressed>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d011      	beq.n	80009a6 <fsm_run+0x29e>
                handleKeyInput(2);
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff fd6a 	bl	800045c <handleKeyInput>
                status = RED_GREEN;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <fsm_run+0x2a4>)
 800098a:	2296      	movs	r2, #150	; 0x96
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	e00a      	b.n	80009a6 <fsm_run+0x29e>
            break;
 8000990:	bf00      	nop
 8000992:	e008      	b.n	80009a6 <fsm_run+0x29e>
            break;
 8000994:	bf00      	nop
 8000996:	e006      	b.n	80009a6 <fsm_run+0x29e>
            break;
 8000998:	bf00      	nop
 800099a:	e004      	b.n	80009a6 <fsm_run+0x29e>
            break;
 800099c:	bf00      	nop
 800099e:	e002      	b.n	80009a6 <fsm_run+0x29e>
            break;
 80009a0:	bf00      	nop
 80009a2:	e000      	b.n	80009a6 <fsm_run+0x29e>
            break;
 80009a4:	bf00      	nop
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000058 	.word	0x20000058
 80009b0:	200000a8 	.word	0x200000a8
 80009b4:	200000a4 	.word	0x200000a4
 80009b8:	200000c0 	.word	0x200000c0
 80009bc:	40010800 	.word	0x40010800

080009c0 <countDownLED>:
int led_2 = 3;
int stat_led_1 = RED;
int stat_led_2 = GREEN;
int road_1_flag = 0, road_2_flag = 0;

void countDownLED() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
    display7SEG(led_1, led_2);
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <countDownLED+0x134>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a4b      	ldr	r2, [pc, #300]	; (8000af8 <countDownLED+0x138>)
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f906 	bl	8000be0 <display7SEG>

    if (timer_LED_flag == 1) {
 80009d4:	4b49      	ldr	r3, [pc, #292]	; (8000afc <countDownLED+0x13c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	f040 8088 	bne.w	8000aee <countDownLED+0x12e>
        led_1--;
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <countDownLED+0x134>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4a43      	ldr	r2, [pc, #268]	; (8000af4 <countDownLED+0x134>)
 80009e6:	6013      	str	r3, [r2, #0]
        led_2--;
 80009e8:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <countDownLED+0x138>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	4a42      	ldr	r2, [pc, #264]	; (8000af8 <countDownLED+0x138>)
 80009f0:	6013      	str	r3, [r2, #0]

        if (led_1 < 0) {
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <countDownLED+0x134>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da37      	bge.n	8000a6a <countDownLED+0xaa>
            road_1_flag = 1;
 80009fa:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <countDownLED+0x140>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

            switch (stat_led_1) {
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <countDownLED+0x144>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d022      	beq.n	8000a4e <countDownLED+0x8e>
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	dc2f      	bgt.n	8000a6c <countDownLED+0xac>
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <countDownLED+0x56>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d00e      	beq.n	8000a32 <countDownLED+0x72>
 8000a14:	e02a      	b.n	8000a6c <countDownLED+0xac>
                case RED:
                    stat_led_1 = GREEN;
 8000a16:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <countDownLED+0x144>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	601a      	str	r2, [r3, #0]
                    led_1 = setTraffic[GREEN] / 1000;
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <countDownLED+0x148>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <countDownLED+0x14c>)
 8000a22:	fb82 1203 	smull	r1, r2, r2, r3
 8000a26:	1192      	asrs	r2, r2, #6
 8000a28:	17db      	asrs	r3, r3, #31
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <countDownLED+0x134>)
 8000a2e:	6013      	str	r3, [r2, #0]
                    break;
 8000a30:	e01c      	b.n	8000a6c <countDownLED+0xac>
                case YELLOW:
                    stat_led_1 = RED;
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <countDownLED+0x144>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
                    led_1 = setTraffic[RED] / 1000;
 8000a38:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <countDownLED+0x148>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <countDownLED+0x14c>)
 8000a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a42:	1192      	asrs	r2, r2, #6
 8000a44:	17db      	asrs	r3, r3, #31
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <countDownLED+0x134>)
 8000a4a:	6013      	str	r3, [r2, #0]
                    break;
 8000a4c:	e00e      	b.n	8000a6c <countDownLED+0xac>
                case GREEN:
                    stat_led_1 = YELLOW;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <countDownLED+0x144>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
                    led_1 = setTraffic[YELLOW] / 1000;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <countDownLED+0x148>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <countDownLED+0x14c>)
 8000a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5e:	1192      	asrs	r2, r2, #6
 8000a60:	17db      	asrs	r3, r3, #31
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <countDownLED+0x134>)
 8000a66:	6013      	str	r3, [r2, #0]
                    break;
 8000a68:	e000      	b.n	8000a6c <countDownLED+0xac>
            }
        }
 8000a6a:	bf00      	nop

        if (led_2 < 0) {
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <countDownLED+0x138>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da37      	bge.n	8000ae4 <countDownLED+0x124>
            road_2_flag = 1;
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <countDownLED+0x150>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]

            switch (stat_led_2) {
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <countDownLED+0x154>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d022      	beq.n	8000ac8 <countDownLED+0x108>
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	dc2f      	bgt.n	8000ae6 <countDownLED+0x126>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <countDownLED+0xd0>
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d00e      	beq.n	8000aac <countDownLED+0xec>
 8000a8e:	e02a      	b.n	8000ae6 <countDownLED+0x126>
                case RED:
                    stat_led_2 = GREEN;
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <countDownLED+0x154>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	601a      	str	r2, [r3, #0]
                    led_2 = setTraffic[GREEN] / 1000;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <countDownLED+0x148>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <countDownLED+0x14c>)
 8000a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa0:	1192      	asrs	r2, r2, #6
 8000aa2:	17db      	asrs	r3, r3, #31
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <countDownLED+0x138>)
 8000aa8:	6013      	str	r3, [r2, #0]
                    break;
 8000aaa:	e01c      	b.n	8000ae6 <countDownLED+0x126>
                case YELLOW:
                    stat_led_2 = RED;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <countDownLED+0x154>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
                    led_2 = setTraffic[RED] / 1000;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <countDownLED+0x148>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <countDownLED+0x14c>)
 8000ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8000abc:	1192      	asrs	r2, r2, #6
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <countDownLED+0x138>)
 8000ac4:	6013      	str	r3, [r2, #0]
                    break;
 8000ac6:	e00e      	b.n	8000ae6 <countDownLED+0x126>
                case GREEN:
                    stat_led_2 = YELLOW;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <countDownLED+0x154>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
                    led_2 = setTraffic[YELLOW] / 1000;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <countDownLED+0x148>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <countDownLED+0x14c>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	1192      	asrs	r2, r2, #6
 8000ada:	17db      	asrs	r3, r3, #31
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <countDownLED+0x138>)
 8000ae0:	6013      	str	r3, [r2, #0]
                    break;
 8000ae2:	e000      	b.n	8000ae6 <countDownLED+0x126>
            }
        }
 8000ae4:	bf00      	nop

        setTimer_LED(1000);
 8000ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aea:	f000 f9f1 	bl	8000ed0 <setTimer_LED>
    }
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000005c 	.word	0x2000005c
 8000af8:	20000060 	.word	0x20000060
 8000afc:	200000d0 	.word	0x200000d0
 8000b00:	200000a4 	.word	0x200000a4
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	2000004c 	.word	0x2000004c
 8000b0c:	10624dd3 	.word	0x10624dd3
 8000b10:	200000a8 	.word	0x200000a8
 8000b14:	20000064 	.word	0x20000064

08000b18 <update7SEG>:

int tempCounter;
int timer1, timer2;

void update7SEG() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    if (status == INIT || status == RED_GREEN || status == RED_YELLOW || status == GREEN_RED || status == YELLOW_RED) {
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <update7SEG+0xac>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d011      	beq.n	8000b48 <update7SEG+0x30>
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <update7SEG+0xac>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b96      	cmp	r3, #150	; 0x96
 8000b2a:	d00d      	beq.n	8000b48 <update7SEG+0x30>
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <update7SEG+0xac>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2bfa      	cmp	r3, #250	; 0xfa
 8000b32:	d009      	beq.n	8000b48 <update7SEG+0x30>
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <update7SEG+0xac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000b3c:	d004      	beq.n	8000b48 <update7SEG+0x30>
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <update7SEG+0xac>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b46:	d102      	bne.n	8000b4e <update7SEG+0x36>
        countDownLED();
 8000b48:	f7ff ff3a 	bl	80009c0 <countDownLED>
 8000b4c:	e038      	b.n	8000bc0 <update7SEG+0xa8>
    } else {
        if (KeyReg1Counter == 1) {
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <update7SEG+0xb0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d103      	bne.n	8000b5e <update7SEG+0x46>
            status = INIT;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <update7SEG+0xac>)
 8000b58:	2203      	movs	r2, #3
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e019      	b.n	8000b92 <update7SEG+0x7a>
        }

        else if (KeyReg1Counter == 2) {
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <update7SEG+0xb0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d104      	bne.n	8000b70 <update7SEG+0x58>
            tempCounter = TimerModify[RED];
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <update7SEG+0xb4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <update7SEG+0xb8>)
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e010      	b.n	8000b92 <update7SEG+0x7a>
        }

        else if (KeyReg1Counter == 3) {
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <update7SEG+0xb0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d104      	bne.n	8000b82 <update7SEG+0x6a>
            tempCounter = TimerModify[YELLOW];
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <update7SEG+0xb4>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <update7SEG+0xb8>)
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e007      	b.n	8000b92 <update7SEG+0x7a>
        }

        else if (KeyReg1Counter == 4) {
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <update7SEG+0xb0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d103      	bne.n	8000b92 <update7SEG+0x7a>
            tempCounter = TimerModify[GREEN];
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <update7SEG+0xb4>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <update7SEG+0xb8>)
 8000b90:	6013      	str	r3, [r2, #0]
        }

        timer1 = KeyReg1Counter;        // Display MODE
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <update7SEG+0xb0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <update7SEG+0xbc>)
 8000b98:	6013      	str	r3, [r2, #0]
        timer2 = tempCounter / 1000;    // Display value
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <update7SEG+0xb8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <update7SEG+0xc0>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1192      	asrs	r2, r2, #6
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <update7SEG+0xc4>)
 8000bac:	6013      	str	r3, [r2, #0]

        display7SEG(timer1, timer2);
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <update7SEG+0xbc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <update7SEG+0xc4>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f811 	bl	8000be0 <display7SEG>

    }
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000058 	.word	0x20000058
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000040 	.word	0x20000040
 8000bd0:	200000d8 	.word	0x200000d8
 8000bd4:	200000dc 	.word	0x200000dc
 8000bd8:	10624dd3 	.word	0x10624dd3
 8000bdc:	200000d4 	.word	0x200000d4

08000be0 <display7SEG>:

void display7SEG(int count_1, int count_2){
 8000be0:	b4b0      	push	{r4, r5, r7}
 8000be2:	b097      	sub	sp, #92	; 0x5c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	uint32_t num_1[10] = {0x0001, 0x004F, 0x0012, 0x0006, 0x004C, 0x0024, 0x0020, 0x000F, 0x0000, 0x0004};
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <display7SEG+0x68>)
 8000bec:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bfe:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t num_2[10] = {0x0080, 0x2780, 0x0900, 0x0300, 0x2600, 0x1200, 0x1000, 0x0780, 0x0000, 0x0200};
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <display7SEG+0x6c>)
 8000c04:	f107 0408 	add.w	r4, r7, #8
 8000c08:	461d      	mov	r5, r3
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c16:	e884 0003 	stmia.w	r4, {r0, r1}
	GPIOB->ODR = num_1[count_1] | num_2[count_2];
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c22:	4413      	add	r3, r2
 8000c24:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000c30:	440b      	add	r3, r1
 8000c32:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8000c36:	4906      	ldr	r1, [pc, #24]	; (8000c50 <display7SEG+0x70>)
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	60cb      	str	r3, [r1, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	375c      	adds	r7, #92	; 0x5c
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bcb0      	pop	{r4, r5, r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	080027ac 	.word	0x080027ac
 8000c4c:	080027d4 	.word	0x080027d4
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f000 fa72 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f812 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f000 f898 	bl	8000d94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c64:	f000 f84a 	bl	8000cfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <main+0x2c>)
 8000c6a:	f001 f9d3 	bl	8002014 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer_LED(1000);
 8000c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c72:	f000 f92d 	bl	8000ed0 <setTimer_LED>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    fsm_run();
 8000c76:	f7ff fd47 	bl	8000708 <fsm_run>
    update7SEG();
 8000c7a:	f7ff ff4d 	bl	8000b18 <update7SEG>
    fsm_run();
 8000c7e:	e7fa      	b.n	8000c76 <main+0x22>
 8000c80:	200000e0 	.word	0x200000e0

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	; 0x40
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2228      	movs	r2, #40	; 0x28
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fd76 	bl	8002784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fd72 	bl	80017a4 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f8e3 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 ffde 	bl	8001ca4 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cee:	f000 f8cf 	bl	8000e90 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3740      	adds	r7, #64	; 0x40
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d22:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d30:	2209      	movs	r2, #9
 8000d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d42:	f001 f917 	bl	8001f74 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d4c:	f000 f8a0 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d5e:	f001 faad 	bl	80022bc <HAL_TIM_ConfigClockSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d68:	f000 f892 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_TIM2_Init+0x94>)
 8000d7a:	f001 fc75 	bl	8002668 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f884 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000e0 	.word	0x200000e0

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da8:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_GPIO_Init+0xd4>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000df0:	2200      	movs	r2, #0
 8000df2:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8000df6:	481d      	ldr	r0, [pc, #116]	; (8000e6c <MX_GPIO_Init+0xd8>)
 8000df8:	f000 fca3 	bl	8001742 <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|DOT_Pin|DOT1_Pin
                          |DOT2_Pin|DOT3_Pin|DISPLAY_1_Pin|DISPLAY_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|k_Pin
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000e02:	481b      	ldr	r0, [pc, #108]	; (8000e70 <MX_GPIO_Init+0xdc>)
 8000e04:	f000 fc9d 	bl	8001742 <HAL_GPIO_WritePin>
                          |l_Pin|m_Pin|n_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|h_Pin
                          |i_Pin|j_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8000e08:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <MX_GPIO_Init+0xe0>)
 8000e1e:	f000 faff 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin DOT_Pin DOT1_Pin
                           DOT2_Pin DOT3_Pin DISPLAY_1_Pin DISPLAY_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000e22:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000e26:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|DOT_Pin|DOT1_Pin
                          |DOT2_Pin|DOT3_Pin|DISPLAY_1_Pin|DISPLAY_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_GPIO_Init+0xd8>)
 8000e3c:	f000 faf0 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin k_Pin
                           l_Pin m_Pin n_Pin d_Pin
                           e_Pin f_Pin g_Pin h_Pin
                           i_Pin j_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|k_Pin
 8000e40:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000e44:	613b      	str	r3, [r7, #16]
                          |l_Pin|m_Pin|n_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|h_Pin
                          |i_Pin|j_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_GPIO_Init+0xdc>)
 8000e5a:	f000 fae1 	bl	8001420 <HAL_GPIO_Init>

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	40011000 	.word	0x40011000

08000e78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  timerRun();
 8000e80:	f000 f840 	bl	8000f04 <timerRun>
  getKeyInput();
 8000e84:	f7ff f98c 	bl	80001a0 <getKeyInput>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <setTimer3>:
void setTimer2(int duration) {
    timer2_counter = (duration + 1000) / TIMER_CYCLE;
    timer2_flag = 0;
}

void setTimer3(int duration) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    timer3_counter = duration / TIMER_CYCLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <setTimer3+0x28>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <setTimer3+0x2c>)
 8000eb0:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <setTimer3+0x30>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000068 	.word	0x20000068
 8000ec8:	200000bc 	.word	0x200000bc
 8000ecc:	200000c0 	.word	0x200000c0

08000ed0 <setTimer_LED>:
void setTimer4(int duration) {
    timer4_counter = duration / TIMER_CYCLE;
    timer4_flag = 0;
}

void setTimer_LED(int duration) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    timer_LED_counter = duration / TIMER_CYCLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <setTimer_LED+0x28>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <setTimer_LED+0x2c>)
 8000ee4:	6013      	str	r3, [r2, #0]
    timer_LED_flag = 0;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <setTimer_LED+0x30>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000068 	.word	0x20000068
 8000efc:	200000cc 	.word	0x200000cc
 8000f00:	200000d0 	.word	0x200000d0

08000f04 <timerRun>:

void timerRun() {
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
    if (timer1_counter > 0) {
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <timerRun+0xac>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dd0b      	ble.n	8000f28 <timerRun+0x24>
        timer1_counter--;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <timerRun+0xac>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <timerRun+0xac>)
 8000f18:	6013      	str	r3, [r2, #0]
        if (timer1_counter <= 0) {
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <timerRun+0xac>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	dc02      	bgt.n	8000f28 <timerRun+0x24>
            timer1_flag = 1;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <timerRun+0xb0>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer2_counter > 0) {
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <timerRun+0xb4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	dd0b      	ble.n	8000f48 <timerRun+0x44>
        timer2_counter--;
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <timerRun+0xb4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <timerRun+0xb4>)
 8000f38:	6013      	str	r3, [r2, #0]
        if (timer2_counter <= 0) {
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <timerRun+0xb4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dc02      	bgt.n	8000f48 <timerRun+0x44>
            timer2_flag = 1;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <timerRun+0xb8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer3_counter > 0) {
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <timerRun+0xbc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	dd0b      	ble.n	8000f68 <timerRun+0x64>
        timer3_counter--;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <timerRun+0xbc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <timerRun+0xbc>)
 8000f58:	6013      	str	r3, [r2, #0]
        if (timer3_counter <= 0) {
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <timerRun+0xbc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dc02      	bgt.n	8000f68 <timerRun+0x64>
            timer3_flag = 1;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <timerRun+0xc0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer4_counter > 0) {
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <timerRun+0xc4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dd0b      	ble.n	8000f88 <timerRun+0x84>
        timer4_counter--;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <timerRun+0xc4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <timerRun+0xc4>)
 8000f78:	6013      	str	r3, [r2, #0]
        if (timer4_counter <= 0) {
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <timerRun+0xc4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dc02      	bgt.n	8000f88 <timerRun+0x84>
            timer4_flag = 1;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <timerRun+0xc8>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer_LED_counter > 0) {
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <timerRun+0xcc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dd0b      	ble.n	8000fa8 <timerRun+0xa4>
        timer_LED_counter--;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <timerRun+0xcc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <timerRun+0xcc>)
 8000f98:	6013      	str	r3, [r2, #0]
        if (timer_LED_counter <= 0) {
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <timerRun+0xcc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	dc02      	bgt.n	8000fa8 <timerRun+0xa4>
            timer_LED_flag = 1;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <timerRun+0xd0>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	200000ac 	.word	0x200000ac
 8000fb4:	200000b0 	.word	0x200000b0
 8000fb8:	200000b4 	.word	0x200000b4
 8000fbc:	200000b8 	.word	0x200000b8
 8000fc0:	200000bc 	.word	0x200000bc
 8000fc4:	200000c0 	.word	0x200000c0
 8000fc8:	200000c4 	.word	0x200000c4
 8000fcc:	200000c8 	.word	0x200000c8
 8000fd0:	200000cc 	.word	0x200000cc
 8000fd4:	200000d0 	.word	0x200000d0

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_MspInit+0x5c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <HAL_MspInit+0x5c>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_MspInit+0x5c>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_MspInit+0x5c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_MspInit+0x5c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_MspInit+0x5c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_MspInit+0x60>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_MspInit+0x60>)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40021000 	.word	0x40021000
 8001038:	40010000 	.word	0x40010000

0800103c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800104c:	d113      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_TIM_Base_MspInit+0x44>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_TIM_Base_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_TIM_Base_MspInit+0x44>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	201c      	movs	r0, #28
 800106c:	f000 f9a1 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001070:	201c      	movs	r0, #28
 8001072:	f000 f9ba 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ca:	f000 f87f 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM2_IRQHandler+0x10>)
 80010da:	f000 ffe7 	bl	80020ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000e0 	.word	0x200000e0

080010e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111a:	f7ff ffe5 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f001 fb0d 	bl	800273c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001122:	f7ff fd97 	bl	8000c54 <main>
  bx lr
 8001126:	4770      	bx	lr
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001130:	08002824 	.word	0x08002824
  ldr r2, =_sbss
 8001134:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001138:	2000012c 	.word	0x2000012c

0800113c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_2_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x28>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x28>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f923 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	200f      	movs	r0, #15
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff ff3c 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40022000 	.word	0x40022000

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f93b 	bl	8001406 <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f903 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000006c 	.word	0x2000006c
 80011c4:	20000074 	.word	0x20000074
 80011c8:	20000070 	.word	0x20000070

080011cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x1c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_IncTick+0x20>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <HAL_IncTick+0x20>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	20000074 	.word	0x20000074
 80011ec:	20000128 	.word	0x20000128

080011f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <HAL_GetTick+0x10>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	20000128 	.word	0x20000128

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4906      	ldr	r1, [pc, #24]	; (800129c <__NVIC_EnableIRQ+0x34>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff90 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff2d 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff42 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff90 	bl	80012f4 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5f 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff35 	bl	8001268 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b08b      	sub	sp, #44	; 0x2c
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	e148      	b.n	80016c6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001434:	2201      	movs	r2, #1
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8137 	bne.w	80016c0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4aa3      	ldr	r2, [pc, #652]	; (80016e4 <HAL_GPIO_Init+0x2c4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d05e      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 800145c:	4aa1      	ldr	r2, [pc, #644]	; (80016e4 <HAL_GPIO_Init+0x2c4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d875      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001462:	4aa1      	ldr	r2, [pc, #644]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d058      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001468:	4a9f      	ldr	r2, [pc, #636]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d86f      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800146e:	4a9f      	ldr	r2, [pc, #636]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d052      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001474:	4a9d      	ldr	r2, [pc, #628]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d869      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800147a:	4a9d      	ldr	r2, [pc, #628]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d04c      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001480:	4a9b      	ldr	r2, [pc, #620]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d863      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001486:	4a9b      	ldr	r2, [pc, #620]	; (80016f4 <HAL_GPIO_Init+0x2d4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d046      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 800148c:	4a99      	ldr	r2, [pc, #612]	; (80016f4 <HAL_GPIO_Init+0x2d4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d85d      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001492:	2b12      	cmp	r3, #18
 8001494:	d82a      	bhi.n	80014ec <HAL_GPIO_Init+0xcc>
 8001496:	2b12      	cmp	r3, #18
 8001498:	d859      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <HAL_GPIO_Init+0x80>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	0800151b 	.word	0x0800151b
 80014a4:	080014f5 	.word	0x080014f5
 80014a8:	08001507 	.word	0x08001507
 80014ac:	08001549 	.word	0x08001549
 80014b0:	0800154f 	.word	0x0800154f
 80014b4:	0800154f 	.word	0x0800154f
 80014b8:	0800154f 	.word	0x0800154f
 80014bc:	0800154f 	.word	0x0800154f
 80014c0:	0800154f 	.word	0x0800154f
 80014c4:	0800154f 	.word	0x0800154f
 80014c8:	0800154f 	.word	0x0800154f
 80014cc:	0800154f 	.word	0x0800154f
 80014d0:	0800154f 	.word	0x0800154f
 80014d4:	0800154f 	.word	0x0800154f
 80014d8:	0800154f 	.word	0x0800154f
 80014dc:	0800154f 	.word	0x0800154f
 80014e0:	0800154f 	.word	0x0800154f
 80014e4:	080014fd 	.word	0x080014fd
 80014e8:	08001511 	.word	0x08001511
 80014ec:	4a82      	ldr	r2, [pc, #520]	; (80016f8 <HAL_GPIO_Init+0x2d8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014f2:	e02c      	b.n	800154e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e029      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	3304      	adds	r3, #4
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e024      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	3308      	adds	r3, #8
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e01f      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	330c      	adds	r3, #12
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e01a      	b.n	8001550 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001522:	2304      	movs	r3, #4
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e013      	b.n	8001550 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001530:	2308      	movs	r3, #8
 8001532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	611a      	str	r2, [r3, #16]
          break;
 800153a:	e009      	b.n	8001550 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800153c:	2308      	movs	r3, #8
 800153e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	615a      	str	r2, [r3, #20]
          break;
 8001546:	e003      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x130>
          break;
 800154e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d801      	bhi.n	800155a <HAL_GPIO_Init+0x13a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	e001      	b.n	800155e <HAL_GPIO_Init+0x13e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3304      	adds	r3, #4
 800155e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2bff      	cmp	r3, #255	; 0xff
 8001564:	d802      	bhi.n	800156c <HAL_GPIO_Init+0x14c>
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0x152>
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	3b08      	subs	r3, #8
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	210f      	movs	r1, #15
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	431a      	orrs	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8090 	beq.w	80016c0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a0:	4b56      	ldr	r3, [pc, #344]	; (80016fc <HAL_GPIO_Init+0x2dc>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a55      	ldr	r2, [pc, #340]	; (80016fc <HAL_GPIO_Init+0x2dc>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_GPIO_Init+0x2dc>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b8:	4a51      	ldr	r2, [pc, #324]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a49      	ldr	r2, [pc, #292]	; (8001704 <HAL_GPIO_Init+0x2e4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00d      	beq.n	8001600 <HAL_GPIO_Init+0x1e0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a48      	ldr	r2, [pc, #288]	; (8001708 <HAL_GPIO_Init+0x2e8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_Init+0x1dc>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a47      	ldr	r2, [pc, #284]	; (800170c <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <HAL_GPIO_Init+0x1d8>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e004      	b.n	8001602 <HAL_GPIO_Init+0x1e2>
 80015f8:	2303      	movs	r3, #3
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_Init+0x1e2>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_GPIO_Init+0x1e2>
 8001600:	2300      	movs	r3, #0
 8001602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001604:	f002 0203 	and.w	r2, r2, #3
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	4093      	lsls	r3, r2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001612:	493b      	ldr	r1, [pc, #236]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4937      	ldr	r1, [pc, #220]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800163a:	4b35      	ldr	r3, [pc, #212]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	43db      	mvns	r3, r3
 8001642:	4933      	ldr	r1, [pc, #204]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 8001644:	4013      	ands	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	492d      	ldr	r1, [pc, #180]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	43db      	mvns	r3, r3
 800166a:	4929      	ldr	r1, [pc, #164]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 800166c:	4013      	ands	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	4923      	ldr	r1, [pc, #140]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	491f      	ldr	r1, [pc, #124]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 8001694:	4013      	ands	r3, r2
 8001696:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	4919      	ldr	r1, [pc, #100]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60cb      	str	r3, [r1, #12]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4915      	ldr	r1, [pc, #84]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	3301      	adds	r3, #1
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f47f aeaf 	bne.w	8001434 <HAL_GPIO_Init+0x14>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	372c      	adds	r7, #44	; 0x2c
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	10320000 	.word	0x10320000
 80016e8:	10310000 	.word	0x10310000
 80016ec:	10220000 	.word	0x10220000
 80016f0:	10210000 	.word	0x10210000
 80016f4:	10120000 	.word	0x10120000
 80016f8:	10110000 	.word	0x10110000
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000
 8001704:	40010800 	.word	0x40010800
 8001708:	40010c00 	.word	0x40010c00
 800170c:	40011000 	.word	0x40011000
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001752:	787b      	ldrb	r3, [r7, #1]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001758:	887a      	ldrh	r2, [r7, #2]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800175e:	e003      	b.n	8001768 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	041a      	lsls	r2, r3, #16
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	611a      	str	r2, [r3, #16]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001784:	887a      	ldrh	r2, [r7, #2]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	041a      	lsls	r2, r3, #16
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43d9      	mvns	r1, r3
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	400b      	ands	r3, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	611a      	str	r2, [r3, #16]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e26c      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8087 	beq.w	80018d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c4:	4b92      	ldr	r3, [pc, #584]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00c      	beq.n	80017ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d0:	4b8f      	ldr	r3, [pc, #572]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d112      	bne.n	8001802 <HAL_RCC_OscConfig+0x5e>
 80017dc:	4b8c      	ldr	r3, [pc, #560]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e8:	d10b      	bne.n	8001802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	4b89      	ldr	r3, [pc, #548]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d06c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x12c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d168      	bne.n	80018d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e246      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x76>
 800180c:	4b80      	ldr	r3, [pc, #512]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a7f      	ldr	r2, [pc, #508]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x98>
 8001822:	4b7b      	ldr	r3, [pc, #492]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7a      	ldr	r2, [pc, #488]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b78      	ldr	r3, [pc, #480]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a77      	ldr	r2, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xbc>
 8001846:	4b72      	ldr	r3, [pc, #456]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a71      	ldr	r2, [pc, #452]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6e      	ldr	r2, [pc, #440]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 8001860:	4b6b      	ldr	r3, [pc, #428]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6a      	ldr	r2, [pc, #424]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a67      	ldr	r2, [pc, #412]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fcb6 	bl	80011f0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fcb2 	bl	80011f0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1fa      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xe4>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fca2 	bl	80011f0 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fc9e 	bl	80011f0 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1e6      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x10c>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d063      	beq.n	80019a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018de:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ea:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x18c>
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x176>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1ba      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4939      	ldr	r1, [pc, #228]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e03a      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <HAL_RCC_OscConfig+0x270>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fc57 	bl	80011f0 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fc53 	bl	80011f0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e19b      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4927      	ldr	r1, [pc, #156]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <HAL_RCC_OscConfig+0x270>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fc36 	bl	80011f0 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff fc32 	bl	80011f0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e17a      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d03a      	beq.n	8001a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d019      	beq.n	80019ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc16 	bl	80011f0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff fc12 	bl	80011f0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e15a      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 faa6 	bl	8001f38 <RCC_Delay>
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f4:	f7ff fbfc 	bl	80011f0 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fa:	e00f      	b.n	8001a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fc:	f7ff fbf8 	bl	80011f0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d908      	bls.n	8001a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e140      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	42420000 	.word	0x42420000
 8001a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	4b9e      	ldr	r3, [pc, #632]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1e9      	bne.n	80019fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a6 	beq.w	8001b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3a:	4b97      	ldr	r3, [pc, #604]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b94      	ldr	r3, [pc, #592]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a93      	ldr	r2, [pc, #588]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b91      	ldr	r3, [pc, #580]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a62:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6e:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a8a      	ldr	r2, [pc, #552]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fbb9 	bl	80011f0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff fbb5 	bl	80011f0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0fd      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x312>
 8001aa8:	4b7b      	ldr	r3, [pc, #492]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a7a      	ldr	r2, [pc, #488]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e02d      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x334>
 8001abe:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a75      	ldr	r2, [pc, #468]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4b73      	ldr	r3, [pc, #460]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a72      	ldr	r2, [pc, #456]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	e01c      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d10c      	bne.n	8001afa <HAL_RCC_OscConfig+0x356>
 8001ae0:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a6c      	ldr	r2, [pc, #432]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a69      	ldr	r2, [pc, #420]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	e00b      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a66      	ldr	r2, [pc, #408]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a63      	ldr	r2, [pc, #396]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d015      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fb69 	bl	80011f0 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff fb65 	bl	80011f0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0ab      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ee      	beq.n	8001b22 <HAL_RCC_OscConfig+0x37e>
 8001b44:	e014      	b.n	8001b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fb53 	bl	80011f0 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7ff fb4f 	bl	80011f0 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e095      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ee      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d105      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b76:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a47      	ldr	r2, [pc, #284]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8081 	beq.w	8001c8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d061      	beq.n	8001c5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d146      	bne.n	8001c2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <HAL_RCC_OscConfig+0x4fc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fb23 	bl	80011f0 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fb1f 	bl	80011f0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e067      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc0:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d108      	bne.n	8001be8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	492d      	ldr	r1, [pc, #180]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a19      	ldr	r1, [r3, #32]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	4927      	ldr	r1, [pc, #156]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_OscConfig+0x4fc>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff faf3 	bl	80011f0 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff faef 	bl	80011f0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e037      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x46a>
 8001c2c:	e02f      	b.n	8001c8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_RCC_OscConfig+0x4fc>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fadc 	bl	80011f0 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff fad8 	bl	80011f0 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e020      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x498>
 8001c5a:	e018      	b.n	8001c8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e013      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	42420060 	.word	0x42420060

08001ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0d0      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4965      	ldr	r1, [pc, #404]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	494d      	ldr	r1, [pc, #308]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d040      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e073      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4936      	ldr	r1, [pc, #216]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d94:	f7ff fa2c 	bl	80011f0 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff fa28 	bl	80011f0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e053      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d210      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0207 	bic.w	r2, r3, #7
 8001dda:	4922      	ldr	r1, [pc, #136]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4916      	ldr	r1, [pc, #88]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490e      	ldr	r1, [pc, #56]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e32:	f000 f821 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	490a      	ldr	r1, [pc, #40]	; (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e44:	5ccb      	ldrb	r3, [r1, r3]
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1cc>)
 8001e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f98a 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	0800280c 	.word	0x0800280c
 8001e70:	2000006c 	.word	0x2000006c
 8001e74:	20000070 	.word	0x20000070

08001e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e80:	1d3c      	adds	r4, r7, #4
 8001e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e88:	f240 2301 	movw	r3, #513	; 0x201
 8001e8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x46>
 8001eb6:	e02d      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eba:	623b      	str	r3, [r7, #32]
      break;
 8001ebc:	e02d      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eca:	4413      	add	r3, r2
 8001ecc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ed0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	0c5b      	lsrs	r3, r3, #17
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eea:	4413      	add	r3, r2
 8001eec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ef0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	fb02 f203 	mul.w	r2, r2, r3
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
 8001f02:	e004      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	623b      	str	r3, [r7, #32]
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f16:	623b      	str	r3, [r7, #32]
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc90      	pop	{r4, r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	080027fc 	.word	0x080027fc
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	007a1200 	.word	0x007a1200
 8001f34:	003d0900 	.word	0x003d0900

08001f38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <RCC_Delay+0x34>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <RCC_Delay+0x38>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0a5b      	lsrs	r3, r3, #9
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f54:	bf00      	nop
  }
  while (Delay --);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	60fa      	str	r2, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f9      	bne.n	8001f54 <RCC_Delay+0x1c>
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	2000006c 	.word	0x2000006c
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff f84e 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f000 fa6a 	bl	800248c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e035      	b.n	8002098 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <HAL_TIM_Base_Start_IT+0x90>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_TIM_Base_Start_IT+0x4e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d004      	beq.n	8002062 <HAL_TIM_Base_Start_IT+0x4e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <HAL_TIM_Base_Start_IT+0x94>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d111      	bne.n	8002086 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b06      	cmp	r3, #6
 8002072:	d010      	beq.n	8002096 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002084:	e007      	b.n	8002096 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40012c00 	.word	0x40012c00
 80020a8:	40000400 	.word	0x40000400

080020ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0202 	mvn.w	r2, #2
 80020d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f9b1 	bl	8002456 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f9a4 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f9b3 	bl	8002468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b04      	cmp	r3, #4
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0204 	mvn.w	r2, #4
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f987 	bl	8002456 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f97a 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f989 	bl	8002468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b08      	cmp	r3, #8
 8002168:	d122      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b08      	cmp	r3, #8
 8002176:	d11b      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0208 	mvn.w	r2, #8
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f95d 	bl	8002456 <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f950 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f95f 	bl	8002468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d122      	bne.n	8002204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d11b      	bne.n	8002204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0210 	mvn.w	r2, #16
 80021d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2208      	movs	r2, #8
 80021da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f933 	bl	8002456 <HAL_TIM_IC_CaptureCallback>
 80021f0:	e005      	b.n	80021fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f926 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f935 	bl	8002468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d10e      	bne.n	8002230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d107      	bne.n	8002230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0201 	mvn.w	r2, #1
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fe24 	bl	8000e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223a:	2b80      	cmp	r3, #128	; 0x80
 800223c:	d10e      	bne.n	800225c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d107      	bne.n	800225c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fa67 	bl	800272a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8f9 	bl	800247a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b20      	cmp	r3, #32
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0220 	mvn.w	r2, #32
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa32 	bl	8002718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_TIM_ConfigClockSource+0x18>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e0b3      	b.n	800243c <HAL_TIM_ConfigClockSource+0x180>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230c:	d03e      	beq.n	800238c <HAL_TIM_ConfigClockSource+0xd0>
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	f200 8087 	bhi.w	8002424 <HAL_TIM_ConfigClockSource+0x168>
 8002316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231a:	f000 8085 	beq.w	8002428 <HAL_TIM_ConfigClockSource+0x16c>
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	d87f      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x168>
 8002324:	2b70      	cmp	r3, #112	; 0x70
 8002326:	d01a      	beq.n	800235e <HAL_TIM_ConfigClockSource+0xa2>
 8002328:	2b70      	cmp	r3, #112	; 0x70
 800232a:	d87b      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x168>
 800232c:	2b60      	cmp	r3, #96	; 0x60
 800232e:	d050      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x116>
 8002330:	2b60      	cmp	r3, #96	; 0x60
 8002332:	d877      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x168>
 8002334:	2b50      	cmp	r3, #80	; 0x50
 8002336:	d03c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0xf6>
 8002338:	2b50      	cmp	r3, #80	; 0x50
 800233a:	d873      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x168>
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d058      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x136>
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	d86f      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x168>
 8002344:	2b30      	cmp	r3, #48	; 0x30
 8002346:	d064      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x156>
 8002348:	2b30      	cmp	r3, #48	; 0x30
 800234a:	d86b      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x168>
 800234c:	2b20      	cmp	r3, #32
 800234e:	d060      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x156>
 8002350:	2b20      	cmp	r3, #32
 8002352:	d867      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x168>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d05c      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x156>
 8002358:	2b10      	cmp	r3, #16
 800235a:	d05a      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800235c:	e062      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f000 f95c 	bl	800262a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002380:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	609a      	str	r2, [r3, #8]
      break;
 800238a:	e04e      	b.n	800242a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f000 f945 	bl	800262a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ae:	609a      	str	r2, [r3, #8]
      break;
 80023b0:	e03b      	b.n	800242a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	461a      	mov	r2, r3
 80023c0:	f000 f8bc 	bl	800253c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2150      	movs	r1, #80	; 0x50
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f913 	bl	80025f6 <TIM_ITRx_SetConfig>
      break;
 80023d0:	e02b      	b.n	800242a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	f000 f8da 	bl	8002598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2160      	movs	r1, #96	; 0x60
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f903 	bl	80025f6 <TIM_ITRx_SetConfig>
      break;
 80023f0:	e01b      	b.n	800242a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	461a      	mov	r2, r3
 8002400:	f000 f89c 	bl	800253c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2140      	movs	r1, #64	; 0x40
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f8f3 	bl	80025f6 <TIM_ITRx_SetConfig>
      break;
 8002410:	e00b      	b.n	800242a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f000 f8ea 	bl	80025f6 <TIM_ITRx_SetConfig>
        break;
 8002422:	e002      	b.n	800242a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002424:	bf00      	nop
 8002426:	e000      	b.n	800242a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002428:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a25      	ldr	r2, [pc, #148]	; (8002534 <TIM_Base_SetConfig+0xa8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <TIM_Base_SetConfig+0x28>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024aa:	d003      	beq.n	80024b4 <TIM_Base_SetConfig+0x28>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a22      	ldr	r2, [pc, #136]	; (8002538 <TIM_Base_SetConfig+0xac>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d108      	bne.n	80024c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <TIM_Base_SetConfig+0xa8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <TIM_Base_SetConfig+0x52>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d4:	d003      	beq.n	80024de <TIM_Base_SetConfig+0x52>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a17      	ldr	r2, [pc, #92]	; (8002538 <TIM_Base_SetConfig+0xac>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d108      	bne.n	80024f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a07      	ldr	r2, [pc, #28]	; (8002534 <TIM_Base_SetConfig+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d103      	bne.n	8002524 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	615a      	str	r2, [r3, #20]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40000400 	.word	0x40000400

0800253c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f023 0201 	bic.w	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 030a 	bic.w	r3, r3, #10
 8002578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	621a      	str	r2, [r3, #32]
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f023 0210 	bic.w	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	031b      	lsls	r3, r3, #12
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	621a      	str	r2, [r3, #32]
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	f043 0307 	orr.w	r3, r3, #7
 8002618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800262a:	b480      	push	{r7}
 800262c:	b087      	sub	sp, #28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002644:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	021a      	lsls	r2, r3, #8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	431a      	orrs	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4313      	orrs	r3, r2
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	609a      	str	r2, [r3, #8]
}
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800267c:	2302      	movs	r3, #2
 800267e:	e041      	b.n	8002704 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d009      	beq.n	80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d004      	beq.n	80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a10      	ldr	r2, [pc, #64]	; (8002714 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10c      	bne.n	80026f2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40000400 	.word	0x40000400

08002718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <__libc_init_array>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	2600      	movs	r6, #0
 8002740:	4d0c      	ldr	r5, [pc, #48]	; (8002774 <__libc_init_array+0x38>)
 8002742:	4c0d      	ldr	r4, [pc, #52]	; (8002778 <__libc_init_array+0x3c>)
 8002744:	1b64      	subs	r4, r4, r5
 8002746:	10a4      	asrs	r4, r4, #2
 8002748:	42a6      	cmp	r6, r4
 800274a:	d109      	bne.n	8002760 <__libc_init_array+0x24>
 800274c:	f000 f822 	bl	8002794 <_init>
 8002750:	2600      	movs	r6, #0
 8002752:	4d0a      	ldr	r5, [pc, #40]	; (800277c <__libc_init_array+0x40>)
 8002754:	4c0a      	ldr	r4, [pc, #40]	; (8002780 <__libc_init_array+0x44>)
 8002756:	1b64      	subs	r4, r4, r5
 8002758:	10a4      	asrs	r4, r4, #2
 800275a:	42a6      	cmp	r6, r4
 800275c:	d105      	bne.n	800276a <__libc_init_array+0x2e>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	f855 3b04 	ldr.w	r3, [r5], #4
 8002764:	4798      	blx	r3
 8002766:	3601      	adds	r6, #1
 8002768:	e7ee      	b.n	8002748 <__libc_init_array+0xc>
 800276a:	f855 3b04 	ldr.w	r3, [r5], #4
 800276e:	4798      	blx	r3
 8002770:	3601      	adds	r6, #1
 8002772:	e7f2      	b.n	800275a <__libc_init_array+0x1e>
 8002774:	0800281c 	.word	0x0800281c
 8002778:	0800281c 	.word	0x0800281c
 800277c:	0800281c 	.word	0x0800281c
 8002780:	08002820 	.word	0x08002820

08002784 <memset>:
 8002784:	4603      	mov	r3, r0
 8002786:	4402      	add	r2, r0
 8002788:	4293      	cmp	r3, r2
 800278a:	d100      	bne.n	800278e <memset+0xa>
 800278c:	4770      	bx	lr
 800278e:	f803 1b01 	strb.w	r1, [r3], #1
 8002792:	e7f9      	b.n	8002788 <memset+0x4>

08002794 <_init>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	bf00      	nop
 8002798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279a:	bc08      	pop	{r3}
 800279c:	469e      	mov	lr, r3
 800279e:	4770      	bx	lr

080027a0 <_fini>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr
